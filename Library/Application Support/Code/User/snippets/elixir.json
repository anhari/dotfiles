{
  ".": {
    "prefix": ".",
    "body": "|> ${0}"
  },
  "%": {
    "prefix": "m",
    "body": "%{${0}}"
  },
  "al": {
    "prefix": "al",
    "body": "alias $0"
  },
  "d": {
    "prefix": "d",
    "body": "def ${0} do\nend"
  },
  "dm": {
    "prefix": "dm",
    "body": "defmodule ${0} do\nend"
  },
  "dd": {
    "prefix": "dd",
    "body": "defdelegate ${0}, to:"
  },
  "doc": {
    "prefix": "doc",
    "body": "@doc \"\"\"\n${0}\n\"\"\""
  },
  "ds": {
    "prefix": "ds",
    "body": "defstruct(\n\t${0}\n)"
  },
  "fn": {
    "prefix": "fn",
    "body": "fn () -> ${0:operation} end"
  },
  "hdoc": {
    "prefix": "hdoc",
    "body": [
      "\"\"\"",
      "${0}",
      "\"\"\""
    ],
    "description": "heredoc",
  },
  "mdoc": {
    "prefix": "mdoc",
    "body": "@moduledoc \"\"\"\n${0}\n\"\"\""
  },
  "priv": {
    "prefix": "priv",
    "body": "# private ####################################################################"
  },
  "rec": {
    "prefix": "rec",
    "body": "receive do\n\t${0:pattern} ->\n\t\t# stuff to do\nend"
  },
  "pt": {
    "prefix": "pt",
    "body": "pipe_through :${0}"
  },
  "res": {
    "prefix": "res",
    "body": "resources \"/$1\", `!p snip.rv = t[1].capitalize()[:-1] + \"Controller\"`, only: [:${2}]"
  },
  "@i": {
    "prefix": "@i",
    "body": "def index(conn, _params) do\n\trender(conn, :index)${0}\nend"
  },
  "@s": {
    "prefix": "@s",
    "body": "def show(conn, %{ \"id\" => id}) do\n\t${1:resource} =\n\trender(conn, :show, $1: $1)\nend"
  },
  "@u": {
    "prefix": "@u",
    "body": "def update(conn, _params) do\n\t${0}\nend"
  },
  "@e": {
    "prefix": "@e",
    "body": "def edit(conn, _params) do\n\t${0}\nend"
  },
  "@n": {
    "prefix": "@n",
    "body": "def new(conn, _params) do\n\tchangeset = ${0}\n\trender(conn, :new, changeset: changeset)\nend"
  },
  "@c": {
    "prefix": "@c",
    "body": "def create(conn, _params) do\n\t${0}\nend"
  },
  "@d": {
    "prefix": "@d",
    "body": "def delete(conn, _params) do\n\t${0}\nend"
  },
  "rcon": {
    "prefix": "rcon",
    "body": "render conn, \"${0}.html\""
  },
  "pf": {
    "prefix": "pf",
    "body": "put_flash(:info, \"$0\")"
  },
  "rd": {
    "prefix": "rd",
    "body": "redirect(to: Routes.$1_path(conn, :${0:action}))"
  },
  "test": {
    "prefix": "test",
    "body": "test \"${0}\" do\nend"
  },
  "uidx": {
    "prefix": "uidx",
    "body": "create unique_index(:${1:table}, [:${0:field}])"
  },
  "cast": {
    "prefix": "cast",
    "body": "cast(attrs, [:${0:field}])"
  },
  "vreq": {
    "prefix": "vreq",
    "body": "validate_required([:${0:field}])"
  },
  "vlen": {
    "prefix": "vlen",
    "body": "validate_length(:${0:field}, min: 1, max: 1000)"
  },
  "case": {
    "prefix": "case",
    "body": ["case $0 do", "\t{:ok, contents} ->", "end"]
  },
  "ecs": {
    "prefix": "ecs",
    "body": "%Ecto.Changeset{}"
  },
  "nf": {
    "prefix": "nf",
    "body": "null: false"
  },
  "ho": {
    "prefix": "ho",
    "body": "has_one :$0"
  },
  "virt": {
    "prefix": "virt",
    "body": "virtual: true"
  },
  "plug": {
    "prefix": "plug",
    "body": "defmodule $1 do\n\timport Plug.Conn\n\n\talias $0\n\n\tdef init(opts) do\n\tend\n\n\tdef call(conn, _opts) do\n\tend\nend"
  },
  "ok tuple": {
    "prefix": "okt",
    "body": "{:ok, ${0}}"
  },
  "error tuple": {
    "prefix": "et",
    "body": "{:error, ${0}}"
  },
  "IEx.pry": {
    "prefix": "pry",
    "body": "require IEx; IEx.pry"
  },
  "struct": {
    "prefix": "st",
    "body": "%${1}{${0}}"
  }
}