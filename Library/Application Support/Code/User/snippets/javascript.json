{
  "imp": {
    "prefix": "imp",
    "body": "import ${0};",
    "description": "import"
  },
  ".": {
    "prefix": ".",
    "body": "{\n\t${0}\n}",
    "description": "code block"
  },
  ",": {
    "prefix": ",",
    "body": "{\n\t${0}\n},",
    "description": "code block"
  },
  ">": {
    "prefix": ">",
    "body": "(${1}) => {\n\t${0}\n}",
    "description": "fat arrow function"
  },
  ")": {
    "prefix": ")",
    "body": "(${1}) => (\n\t${0}\n)",
    "description": "implicit return function"
  },
  "clog": {
    "prefix": "clog",
    "body": "console.log(\"${0}\", ${0});",
    "description": "console log"
  },
  "ctab": {
    "prefix": "ctab",
    "body": "console.table(${0});",
    "description": "console table"
  },
  "if": {
    "prefix": "if",
    "body": "if (${1}) {\n\t${0}\n}",
    "description": "if"
  },
  "ife": {
    "prefix": "ife",
    "body": "if (${1}) {\n\t${2}\n} else {\n\t${0}\n}",
    "description": "if else"
  },
  "ctor": {
    "prefix": "ctor",
    "body": "constructor(props) {\n\tsuper(props);\n\n\tthis.state = {\n\t\t${0}\n\t};\n}",
    "description": "React.js constructor"
  },
  "gis": {
    "prefix": "gis",
    "body": "getInitialState() {\n\treturn {\n\t\t${0}\n\t}\n}",
    "description": "React.js get initial state"
  },
  "cdm": {
    "prefix": "cdm",
    "body": "componentDidMount() {\n\t${0}\n}",
    "description": "React.js componentDidMount"
  },
  "cwm": {
    "prefix": "cwm",
    "body": "componentWillMount() {\n\t${0}\n}",
    "description": "React.js componentWillMount"
  },
  "cwrp": {
    "prefix": "cwrp",
    "body": "componentWillReceiveProps() {\n\t${0}\n}",
    "description": "React.js componentWillReceiveProps"
  },
  "cwu": {
    "prefix": "cwu",
    "body": "componentWillUnmount() {\n\t${0}\n}",
    "description": "React.js componentWillUnmount"
  },
  "ajax": {
    "prefix": "ajax",
    "body": "$.ajax({\n\turl: '${0}',\n\ttype: 'GET/DELETE/PUT/POST',\n\tdata: { },\n\tsuccess: () => {\n\n\t}\n});",
    "description": "ajax request"
  },
  "irx": {
    "prefix": "irx",
    "body": "import React from 'react';",
    "description": "React.js import core library"
  },
  "ed": {
    "prefix": "ed",
    "body": "export default ${0}",
    "description": "export default"
  },
  "edf": {
    "prefix": "edf",
    "body": [
      "export default (${1}) => (",
      "${0}",
      ")",
    ]
    "description": "export default function"
  },
  "rnd": {
    "prefix": "rnd",
    "body": "render() {\n\treturn (\n\t\t${0}\n\t);\n}",
    "description": "render function"
  },
  "ret": {
    "prefix": "ret",
    "body": "return ${0};",
    "description": "return"
  },
  "s2p": {
    "prefix": "s2p",
    "body": "mapStateToProps(state) {\n\treturn {\n\t\t${0}\n\t};\n}",
    "description": "react-redux mapStateToProps"
  },
  "d2p": {
    "prefix": "d2p",
    "body": "mapDispatchToProps(dispatch) {\n\treturn bindActionCreators({ ${0} }, dispatch);\n}",
    "description": "react-redux mapDispatchToProps"
  },
  "edc": {
    "prefix": "edc",
    "body": "export default connect(mapStateToProps, mapDispatchToProps)(${0});",
    "description": "react-redux connect"
  },
  "danger": {
    "prefix": "danger",
    "body": "dangerouslySetInnerHTML={{__html: ${0}}}",
    "description": "React.js dangerously set inner html"
  },
  "red": {
    "prefix": "red",
    "body": "// Every reducer must return a new object!\nexport default function ${1}Reducer(state = ${2:defaultState}, action) {\n\tswitch (action.type) {\n\t case ${3}:\n\t\treturn action.payload;\n\tdefault:\n\t\treturn state;\n\t}\n}",
    "description": "after each"
  },
  "aed": {
    "prefix": "aed",
    "body": "afterEach(() => {\n\t${0}\n});",
    "description": "after each"
  },
  "bed": {
    "prefix": "bed",
    "body": "beforeEach(() => {\n\t${0}\n});",
    "description": "before each"
  },
  "it": {
    "prefix": "it",
    "body": "it(\"${1}\", () => {\n\t${0}\n});",
    "description": "it block"
  },
  "desc": {
    "prefix": "desc",
    "body": "describe(\"${1}\", () => {\n\t${0}\n});",
    "description": "describe block"
  },
  "cont": {
    "prefix": "cont",
    "body": "context(\"${1}\", () => {\n\t${0}\n});",
    "description": "context block"
  },
  "et": {
    "prefix": "et",
    "body": "expect(${0}).to",
    "description": "expect to"
  },
  "etn": {
    "prefix": "etn",
    "body": "expect(${0}).to.not.",
    "description": "expect to"
  },
  "stimc": {
    "prefix": "stimc",
    "body": "import { Controller } from 'stimulus';\n\nexport default class extends Controller {\n  static targets = [''];\n}",
    "description": "stimulus.js controller"
  }
}
