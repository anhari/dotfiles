{
  "Elixir: Pipe operator": {
    "prefix": ".",
    "body": "\n|> ${0}",
    "description": "Elixir: Pipe Operator",
  },
  "Elixir: Map": {
    "prefix": "m",
    "body": "%{${0}}",
    "description": "Elixir: Map"
  },
  "Elixir: Alias": {
    "prefix": "al",
    "body": "alias $0",
    "description": "Elixir: Alias"
  },
  "Elixir: Define method": {
    "prefix": "d",
    "body": "def ${0} do\nend",
    "description": "Elixir: Define method"
  },
  "Elixir: Define module": {
    "prefix": "dm",
    "body": "defmodule ${1:${TM_FILEPATH/^(?:.*\\/(?:lib|test|spec)(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?(\\/[^\\/]+)?\\/.*\\..*|.*)$/${1:/pascalcase}${1:+.}${2:/pascalcase}${2:+.}${3:/pascalcase}${3:+.}${4:/pascalcase}${4:+.}${5:/pascalcase}${5:+.}${6:/pascalcase}${6:+.}${7:/pascalcase}${7:+.}${8:/pascalcase}${8:+.}${9:/pascalcase}${9:+.}${10:/pascalcase}${10:+.}${11:/pascalcase}${11:+.}${12:/pascalcase}${12:+.}${13:/pascalcase}${13:+.}${14:/pascalcase}${14:+.}${15:/pascalcase}${15:+.}/}}${2:${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/}} do\nend",
    "description": "Elixir: Define module"
  },
  "Elixir: Define delegate": {
    "prefix": "dd",
    "body": "defdelegate ${0}, to:",
    "description": "Elixir: Define delegate"
  },
  "Elixir: Doc": {
    "prefix": "edoc",
    "body": "@doc \"\"\"\n${0}\n\"\"\"",
    "description": "Elixir: doc"
  },
  "Elixir: Define struct": {
    "prefix": "ds",
    "body": "defstruct(\n\t${0}\n)",
    "description": "Elixir: Define struct"
  },
  "fn": {
    "prefix": "fn",
    "body": "fn () -> ${0:operation} end"
  },
  "Elixir: heredoc": {
    "prefix": "hdoc",
    "body": [
      "\"\"\"",
      "${0}",
      "\"\"\""
    ],
    "description": "Elixir: heredoc",
  },
  "Elixir: module doc": {
    "prefix": "mdoc",
    "body": "@moduledoc \"\"\"\n${0}\n\"\"\"",
    "description": "Elixir: module doc",
  },
  "Elixir: private": {
    "prefix": "priv",
    "body": "# private ####################################################################",
    "description": "Elixir: private",
  },
  "rec": {
    "prefix": "rec",
    "body": "receive do\n\t${0:pattern} ->\n\t\t# stuff to do\nend"
  },
  "pt": {
    "prefix": "pt",
    "body": "pipe_through :${0}"
  },
  "@i": {
    "prefix": "@i",
    "body": "def index(conn, _params) do\n\trender(conn, \"index.html\")${0}\nend"
  },
  "@s": {
    "prefix": "@s",
    "body": "def show(conn, %{ \"id\" => id}) do\n\t${1:resource} =\n\trender(conn, \"show.html\", $1: $1)\nend"
  },
  "@u": {
    "prefix": "@u",
    "body": "def update(conn, _params) do\n\t${0}\nend"
  },
  "@e": {
    "prefix": "@e",
    "body": "def edit(conn, _params) do\n\t${0}\nend"
  },
  "@n": {
    "prefix": "@n",
    "body": "def new(conn, _params) do\n\tchangeset = ${0}\n\trender(conn, \"new.html\", changeset: changeset)\nend"
  },
  "@c": {
    "prefix": "@c",
    "body": "def create(conn, _params) do\n\t${0}\nend"
  },
  "@d": {
    "prefix": "@d",
    "body": "def delete(conn, _params) do\n\t${0}\nend"
  },
  "rcon": {
    "prefix": "rcon",
    "body": "render conn, \"${0}.html\""
  },
  "pf": {
    "prefix": "pf",
    "body": "put_flash(:info, \"$0\")"
  },
  "rd": {
    "prefix": "rd",
    "body": "redirect(to: Routes.$1_path(conn, :${0:action}))"
  },
  "test": {
    "prefix": "test",
    "body": "test \"${0}\" do\nend"
  },
  "uidx": {
    "prefix": "uidx",
    "body": "create unique_index(:${1:table}, [:${0:field}])"
  },
  "cast": {
    "prefix": "cast",
    "body": "cast(attrs, [:${0:field}])"
  },
  "vreq": {
    "prefix": "vreq",
    "body": "validate_required([:${0:field}])"
  },
  "vlen": {
    "prefix": "vlen",
    "body": "validate_length(:${0:field}, min: 1, max: 1000)"
  },
  "case": {
    "prefix": "case",
    "body": ["case $0 do", "\t{:ok, contents} ->", "end"]
  },
  "ecs": {
    "prefix": "ecs",
    "body": "%Ecto.Changeset{}"
  },
  "nf": {
    "prefix": "nf",
    "body": "null: false"
  },
  "ho": {
    "prefix": "ho",
    "body": "has_one :$0"
  },
  "virt": {
    "prefix": "virt",
    "body": "virtual: true"
  },
  "plug": {
    "prefix": "plug",
    "body": "defmodule $1 do\n\timport Plug.Conn\n\n\talias $0\n\n\tdef init(opts) do\n\tend\n\n\tdef call(conn, _opts) do\n\tend\nend"
  },
  "ok tuple": {
    "prefix": "ok",
    "body": "{:ok, ${0}}"
  },
  "error tuple": {
    "prefix": "er",
    "body": "{:error, ${0}}"
  },
  "ok tuple assignment": {
    "prefix": "oke",
    "body": "{:ok, ${1}} = $0"
  },
  "error tuple assignment": {
    "prefix": "ere",
    "body": "{:error, ${1}} = $0"
  },
  "IEx.pry": {
    "prefix": "pry",
    "body": "require IEx; IEx.pry"
  },
  "struct": {
    "prefix": "5",
    "body": "%${1:Struct}{${2}}$0"
  },
  "IO Inspect": {
    "prefix": "ins",
    "body": "IO.inspect($0, label: \"$0\")"
  }
}